== Longest Common Substring

The https://en.wikipedia.org/wiki/Longest_common_subsequence_problem[Longest common subsequence (LCS)] problem is about finding the longest possible subsequence present in the two (or more) input sequences.
The subsequence need not occupy consecutive positions inside the original input sequences.

For example, given the strings `"cat"` and `"cut"` as input the LCS algorithm would produce `"ct"` as output.
`"c"`, `"t"` and `""` are other possible subsequences, but `"ct"` is the longest one.

LCS problem has applications in bioinformatics, in the design of https://en.wikipedia.org/wiki/Version_control[version control systems] as well as in other areas of computer science.


==== Insights

There are many articles that discuss the LCS problem in detail. For example, https://www.ics.uci.edu/~eppstein/161/960229.html and http://wordaligned.org/articles/longest-common-subsequence.

==== IO and Examples

*_Arguments_*:

1. The first string.
2. The second string.

*_Return_*:

The longest substring occurring in both input string.

*_Example 1_*:

The same example as in the problem definition.

[source,python]

    assert lcs("cat", "cut") == "ct"

*_Example 2_*:

The LCS of two empty string is an empty string itself.

Only the empty string is common to strings `"a"` and `"b"`.

[source,python]

    assert lcs("", "") == "" 
    assert lcs("a", "b") == "" 
    
*_Example 3_*:

In the first case, the whole second string is the LCS.

[source,python]

    assert lcs("impossible", "possible") == "possible"
    assert lcs("ACGGTCGAGTGCGCGGAAGCCGGCCGA", "GTCGTCGGAATGCGTTGCTCTGTAAA") == "CGGAA"


==== Python Solution

*_lcs_rec_*:

First, a simple and easy but very inefficient solution.
The time-complexity is exponential and the algorithm recomputes the same problems over and over again.

Note how we use `len` as the key function for comparing strings inside `max()`.
That is because `max` uses lexicographical comparison by default for string.

[source,python]
----
def lcs_rec(A, B):
    if A == "" or B == "":
        return ""
    if A[0] == B[0]:
        return A[0] + lcs_rec(A[1:], B[1:]) 
    else:
        return max(lcs_rec(A[1:], B), lcs_rec(A, B[1:]), key=len)
----

*_lcs_*:

We fill the table in a bottom-up fashion: the entry in `table[i][j]` is the LCS of the shorter strings `A[:i]` and `B[:j]`.

The `res` variable stores the LCS we've ever seen, so that we don't have to search for it once we are done filling the table.

Time-complexity is polynomial: `O(len(A)*len(B))`.

[source,python]
----
def lcs(A, B):
    table = [["" for _ in range(len(B)+1)] for _ in range(len(A)+1)]
    res = ""
    for i in range(1, len(A)+1):
        for j in range(1, len(B)+1):
            if A[i-1] == B[j-1]:
                table[i][j] = table[i-1][j-1] + A[i-1]
                res = max(table[i][j], res, key=len)
            else:
                table[i][j] = ""
    return res
----

*_lcs_1d_*:

We save space by noticing that we only need the previous row in the table to fill up the current one.
At the end of the inner loop the computed current row becomes the previous one.
The time-complexity remains the same but the required space is greatly reduced.

[source,python]
----
def lcs_1d(A, B):
    current = ["" for _ in range(len(B)+1)]
    previous = list(current)
    res = ""
    for i in range(1, len(A)+1):
        for j in range(1, len(B)+1):
            if A[i-1] == B[j-1]:
                current[j] = previous[j-1] + A[i-1]
                res = max(current[j], res, key=len)
            else:
                current[j] = max(previous[j], current[j-1], key=len)
        # copy current row to previous
        previous = list(current)
    return res
----
