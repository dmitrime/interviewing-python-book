== Maximum difference in array

Given a non-empty array we need to find the maximum difference between elements with a higher and lower indices.
That is, given an array `A` and indices `i` and `j`, we have to find the maximum difference `A[i]-A[j]` such that `i>j`.


==== Insights

The obvious approach (`*max_diff1*`) is to use a double loop over the array and find all possible differences. 
This works, but is not the ideal approach because it takes quadratic time with respect to the size of the array. 
There is a linear solution.

The key is to notice that we need to keep track of the minimum element we have seen so far.
This is because the difference will be maximized when we subtract the minimum element from the maximum element.
Maximum element will be found as we go through the array left to right, so it's the minimum element we have to remember (`*max_diff2*`).

The same argument holds if we go over the array from right to left.
In that case, we need to do the opposite and remember the maximum element (`*max_diff3*`).

==== IO and Examples

*_Arguments_*:

1. A non-empty array of integers.

*_Return_*:

The maximum difference, or zero when the difference is negative or there is just one element in the array.

*_Example 1_*:

The maximum difference is 10 minus 3.

[source,python]

    assert max_diff1([9, 3, 6, 8, 10, 4, 3]) == 7

*_Example 2_*:

The numbers are in decreasing order, so we return zero.

[source,python]

    assert max_diff2([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 0
    
*_Example 3_*:

The maximum difference is between the last and the first element.

[source,python]

    assert max_diff3([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10

==== Python Solution

*_max_diff1_*:

Straightforward quadratic time algorithm.

[source,python]
----
def max_diff1(a):
    diff = 0
    for i in range(len(a)):
        for j in range(i+1, len(a)):
            if a[j] - a[i] > diff:
                diff = a[j] - a[i]
    return diff
----

*_max_diff2_*:

Linear time algorithm, saves the minimum element seen so far.

[source,python]
----
def max_diff2(a):
    minimum, diff = a[0], 0
    for i in range(1, len(a)):
        if a[i] - minimum > diff:
            diff = a[i] - minimum
        if a[i] < minimum:
            minimum = a[i]
    return diff
----

*_max_diff3_*:

Linear time algorithm, saves the maximum element seen so far.
The loop starts from the second-to-last element and goes back.

[source,python]
----
def max_diff3(a):
    maximum, diff = a[-1], 0
    for i in range(len(a)-2, -1, -1):
        if maximum - a[i] > diff:
            diff = maximum - a[i]
        if maximum < a[i]:
            maximum = a[i]
    return diff
----
