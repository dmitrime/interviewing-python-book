== Merge Sort

https://en.wikipedia.org/wiki/Merge_sort[Merge sort] is one the most famous sorting algorithms.
It's worst case time-complexity of `O(n log n)` makes it a popular choice for a standard sorting algorithm in many libraries.
It also happens to be https://en.wikipedia.org/wiki/Category:Stable_sorts[stable].
It is a very elegant algorithm and a perfect example of the https://en.wikipedia.org/wiki/Divide_and_conquer_algorithms[divide and conquer] design.

Here, we are going to implement our own merge sort in Python.


==== Insights

The idea is very simple.
Divide the list in two parts, left and right.
Sort the left and right parts separately. 
Finally, combine the two sorted parts together into the final sorted list.

This sounds simple enough.
But how to sort the left and the right parts?
Exactly the same way!
Split the left in two parts, sort them separately and merge.
Split the right in two parts, sort them separately and merge.

The recursion stops only when we reach a list consisting of a single element.
And because such a list is already sorted, we are done and can proceed to merging.
This may feel like we are cheating or using some kind of sophism, but it actually works!

The only thing we have to be careful about is the merging function.
An auxiliary list is commonly used to implement this function.
First we copy the range we want to merge into the auxiliary list and then read back from it in increasing order.


==== IO and Examples

*_Arguments_*:

1. A list of integers.

*_Return_*:

A list of integers in sorted (increasing) order.

*_Example 1_*:

A list of numbers from 99 to 0 is in increasing order after sorting.

[source,python]

    nums = list(reversed(range(100)))
    assert mergesort(nums) == range(100)

*_Example 2_*:

A list of numbers from 0 to 99 is first shuffled with `random.shuffle`.
After sorting the list is in increasing order.

[source,python]

    import random
    nums = range(100)
    random.shuffle(nums)
    assert mergesort(nums) == range(100)
    

==== Python Solution

[source,python]
----
def mergesort(numbers):
    N = len(numbers)
    aux = [0]*N
    # Use the auxiliary list to merge
    # two sublists (lo..mid and mid+1..hi)
    # in correct order.
    def _merge(lo, mid, hi):
        # first copy the range to aux
        for k in xrange(lo, hi+1):
            aux[k] = numbers[k]
        # merge the two sublists into numbers[lo..hi]
        i, j = lo, mid+1
        for k in xrange(lo, hi+1):
            if i > mid:
                numbers[k] = aux[j]
                j += 1
            elif j > hi:
                numbers[k] = aux[i]
                i += 1
            elif aux[i] <= aux[j]:
                numbers[k] = aux[i]
                i+= 1
            else:
                numbers[k] = aux[j]
                j += 1
    # recursively partition the list
    def _recursive_sort(lo, hi):
        if lo >= hi:
            return
        mid = lo + (hi-lo) / 2
        # sort the left half
        _recursive_sort(lo, mid)
        # sort the right half
        _recursive_sort(mid+1, hi)
        # merge left and right together
        _merge(lo, mid, hi)

    _recursive_sort(0, N-1)
    return numbers
----
